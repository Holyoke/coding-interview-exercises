c
str1_count.reject { |k,v| str2_count.has_key? k }.inject(0) { |x,y| x + y[1].abs }
str1_count.reject { |k,v| str2_count.has_key? k }.inject(0) { |x,y| y[1].abs }
str1_count.reject { |k,v| str2_count.has_key? k }.inject(0) { |x,y| p y[1].abs }
str1_count.reject { |k,v| str2_count.has_key? k }.inject(0) { |x,y| p y}
str1_count.reject { |k,v| str2_count.has_key? k }.inject(0) { |x,y| p x }
str1_count.reject { |k,v| str2_count.has_key? k }.inject(0) { |x,y,z| z}
str1_count.reject { |k,v| str2_count.has_key? k }.inject(0) { |x,y,z| y}
str1_count.reject { |k,v| str2_count.has_key? k }.inject(0) { |x,y,z| v }
str1_count.reject { |k,v| str2_count.has_key? k }.inject(0) { |x,y,z| x} 
str1_count.reject { |k,v| str2_count.has_key? k }.inject(:+) 
str1_count.reject { |k,v| str2_count.has_key? k }.inject(:+) { |s,k,v| s }
str1_count.reject { |k,v| str2_count.has_key? k }.inject(:+) { |s,k,v| v.abs }
str1_count.reject { |k,v| str2_count.has_key? k }.inject(:+) { |s,v| v.abs }
str1_count.reject { |k,v| str2_count.has_key? k }
str1_count - str2_count
str1_count.subtract
str1_count
quit
str2_count[key]
key
deletions
c
deletions
c
deletions
quit
deletions
c
key
str1_count[key] > 0
str2_count
str2
key
deletions
quit
deletions
quit
str2_count[key]
str2_count[key].nil?
quit
deletions
